<html>

<head>
    <link href='https://schickt.de/font/px8x8.css' rel='stylesheet'>
    <link rel="stylesheet" type="text/css" href="style/style.css" media="screen" />

    <style>

        #code {
            overflow: scroll;
            height: calc(100% - 16px);
        }

    </style>

    <script src='rc-instruction-set.js'></script>
    <script src='rc-address-modes.js'></script>
    
    <script src='ui-common.js'></script>
    
    <script>

        var selected = []
        var code = []
        var current_selection = null
        var current_code = null

        function add(item, source) {
            if (selected.includes(item)) {
                show(item)
                return
            }

            selected.push(item)

            load(item, function (data) {
                code[item] = data;
                show(item)
            })

            list_selected()
        }

        function list_selected() {
            var html = make_ul(selected, 'select', true, ['remove', '[-]'])
            document.getElementById('selection-list').innerHTML = html
        }

        function remove(item) {
            if (selected.includes(item)) {
                current_selection = item
                selected.splice(selected.indexOf(item), 1)

                list_selected()
            }
        }

        function load(item, action) {
            item = item.split(':')

            const source = item[0]
            const name = item[1]

            if (source === 'REMOTE') {
                var url = 'https://raw.githubusercontent.com/n1LS/assembler/master/warriors/' + name;
                var file = new XMLHttpRequest();

                file.onreadystatechange = function () {

                    if (file.readyState == 4 && file.status == 200) {
                        action(file.responseText)
                    }
                }

                file.open('GET', url, true);
                file.send();
            }
            else {
                action(localStorage.getItem(name))
            }
        }

        function show(item) {
            load(item, function (data) {
                current_code = data;
                document.getElementById('code').innerHTML = number_text(data, true)
            })
        }

        function select(item) {
            show(item)
            current_selection = item
        }

        function make_ul(items, function_name, show_source, alt_function) {
            var s = '<ul>'

            for (var i = 0; i < items.length; i++) {
                const texts = items[i].split(':')
                var action = ''

                if (alt_function !== undefined) {
                    action = `<span class='right clickable' onclick='${alt_function[0]}("${items[i]}")'> ${alt_function[1]}</span>`
                }

                var src = show_source ? `<span class='right small'>${texts[0]}</span>` : ''
                s += (`<li onclick='${function_name}("${items[i]}")'>* ${texts[1]}${action}${src}</li>`)
            }

            if (items.length == 0) {
                s += "&nbsp; None<br>"
            }

            s += '</ul>'

            return s
        }

        function load_remote_warriors() {
            // load remote warriors
            setTimeout(function () {
                var url = 'https://raw.githubusercontent.com/n1LS/assembler/master/warriors/listing.txt';
                var file = new XMLHttpRequest();

                file.onreadystatechange = function () {

                    if (file.readyState == 4 && file.status == 200) {
                        var items = file.responseText.split('\n').map(x => x = 'REMOTE:' + x)
                        document.getElementById('public').innerHTML = make_ul(items, 'add', false)
                    }
                }

                file.open('GET', url, true);
                file.send();
            }, 1)
        }

        function selected_warriors() {
            // get the code for all selected warriors
            s = []

            for (var i = 0; i < selected.length; i++) {
                const c = code[selected[i]]
                const b64 = btoa(c)
                s.push(b64)
            }

            return s.join('::')
        }

        function launch() {
            window.parent.postMessage(`debugger::launch::${selected_warriors()}`, '*')
        }

        function match() {
            window.parent.postMessage(`match::load::${selected_warriors()}`, '*')
        }

        function load_local_warriors() {
            // load local warriors
            var items = []

            for (var i = 0; i < localStorage.length; i++) {
                var key = localStorage.key(i)

                if (key.startsWith('#WRRR_')) {
                    items.push(key)
                }
            }

            items = items.map(x => x = 'LOCAL:' + x)

            document.getElementById('local').innerHTML = make_ul(items, 'add', false)
        }

        function load_listings() {
            window.addEventListener('message', message_handler, false)

            load_remote_warriors();
            load_local_warriors();
        }


        function message_handler(event) { }

        function remove_all() {
            code = []
            selected = []

            list_selected()
        }

        function move_to_assembler() {
            window.parent.postMessage(`assembler::load::${btoa(current_code)}`, '*')
        }

    </script>
</head>

<body onload='load_listings()'>

    <div class='top light'>

        <div class='left30 padded light'>

            <div class='heading'>PUBLIC WARRIORS:</div>
            <span id='public'></span>
            <br>

            <div class='heading'>LOCAL WARRIORS:</div>
            <span id='local'></span>
            <br>
            
            <div class='heading'>SELECTED:
                <span class='right clickable' onclick='remove_all()'>[REMOVE ALL]</span>
            </div>
            <span id='selection-list'></span>

        </div>

        <div class='v-spacer'></div>

        <div>
            <pre id='code' class='padded code'></pre>
        </div>

    </div>

    <div class='toolbar'>
        <input type='button' value='SELECTED to DEBUGGER' onclick='launch()'>
        <input type='button' value='SELECTED to MATCH' onclick='match()'>
        <input type='button' value='CODE to ASSEMBLER' onclick='move_to_assembler()' class='right'>
    </div>
</body>

</html>