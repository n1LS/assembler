<html>

<head>
    <link href='https://fonts.googleapis.com/css?family=Overpass+Mono' rel='stylesheet'>
    <style>
        * {
            border: 0;
            font-family: 'Overpass Mono', monospace;
            font-size: 13px;
            line-height: 120%;
            border: 0;
            padding: 0;
            margin: 0;
            background: #101010;
        }

        ::-webkit-resizer,
        ::-webkit-scrollbar,
        ::-webkit-scrollbar-track,
        ::-webkit-scrollbar-button,
        ::-webkit-scrollbar-corner,
        ::-webkit-scrollbar-track-piece {
            background: #202020;
            width: 12px;
            height: 12px;
        }

        ::-webkit-scrollbar-thumb {
            background: #404040;
            border-radius: 6px;
        }

        .gray {
            color: gray;
        }

        #container-top {
            height: 75%;
            overflow: hidden;
        }

        #preprocessor_output {
            width: 30%;
            overflow: scroll;
        }

        #editor,
        #editor-nol,
        #preprocessor_output,
        #assembler_output {
            color: white;
            float: left;
            height: 100%;
            background: black;
        }

        #assembler_output {
            width: 20%;
            overflow: scroll;
        }

        #editor {
            width: calc(50% - 4em - 32px);
            overflow: auto;
            white-space: nowrap;
        }

        #editor-nol,
        .num {
            color: #aaaaaa;
        }

        #editor-nol {
            width: 4em;
            text-align: right;
            padding-right: 1em;
        }

        #preprocessor_output {
            background: #101010;
        }

        input {
            height: 32px;
            padding: 8px;
            color: white;
            background: black;
        }

        .v-spacer {
            width: 8px;
            background: black;
            float: left;
            height: 100%;
        }

        #toolbar {
            background: #404040;
            height: 32px;
            overflow: hidden;
        }

        #log {
            clear: both;
            height: calc(25% - 32px);
            overflow: scroll;
            background: #101010;
        }

        u {
            color: #ffffff;
            text-decoration: none;
        }

        b {
            color: #e2004b;
        }

        i {
            color: #fecb00;
            font-style: normal;
        }

        .yay {
            color: #6bb324;
        }
    </style>

    <script src='rc-core.js'></script>
    <script src='rc-math.js'></script>
    <script src='rc-constants.js'></script>
    <script src='rc-address-modes.js'></script>
    <script src='rc-preprocessor.js'></script>
    <script src='rc-assembler.js'></script>
    <script src='rc-classes.js'></script>
    <script src='rc-instruction-set.js'></script>
    <script src='rc-instruction.js'></script>

    <script>

        var modified = false

        String.prototype.html = function () {
            const escape = [
                ['>', '&gt;'],
                ['<', '&lt;'],
            ]

            var html = this

            escape.forEach(item => {
                html = html.replace(item[0], item[1])    
            })

            return html
        }

        function number_text(text) {
            var s = ''

            for (var i = 0; i < text.length; i++) {
                n = (1 + i + '').padStart(3)

                if (i % 10 == 9) {
                    s += `<u>${n}</u> ${text[i]}<br>`
                } else {
                    s += `<span class='num'>${n}</span> ${text[i]}<br>`
                }
            }

            return s
        }

        function preprocess() {
            var code = document.getElementById('editor').value
            var prepro = new Preprocessor()
            var output = prepro.preprocess(code)

            var content = number_text(output.code.split('\n'))
            document.getElementById('preprocessor_output').innerHTML = content

            html = '<span class="gray">'

            if (output.errors.length) {
                html += `<b>PREPROCESSOR ERRORS:</b>\n${output.errors.join('\n').html()}</b>\n\n`
            }

            if (output.warnings.length) {
                html += `<i>PREPROCESSOR WARNINGS:</i>\n${output.warnings.join('\n').html()}`
            }

            html += '</span>'

            document.getElementById('log').innerHTML = html

            return output
        }

        function assemble(code) {
            var assembler = new Assembler()
            var output = assembler.assemble(code)
            var content = number_text(output.listing.split('\n'))

            document.getElementById('assembler_output').innerHTML = content

            var html = '<br><span class="gray">'

            if (output.errors.length) {
                html += `\n<b>ERRORS:</b>\n${output.errors.join('\n').html()}</b>\n\n`
            }

            if (output.warnings.length) {
                html += `<i>WARNINGS:</i>\n${output.warnings.join('\n').html()}`
            }

            html += '</span>'

            document.getElementById('log').innerHTML += html

            return output
        }

        function changed() {
            var p = preprocess()

            if (p.errors.length == 0) {
                var a = assemble(p.code)

                if (a.errors.length == 0) {
                    modified = true
                    document.getElementById('log').innerHTML +=
                        '<span class="yay">ASSEMBLED SUCCESSFULLY.</span><br>'
                }

                document.getElementById('save_button').hidden = (a.errors.length > 0)
            } else {
                document.getElementById('assembler_output').innerHTML =
                    '<b>Preprocessor errors prevented assembly.</b>'
                document.getElementById('save_button').hidden = true
            }

            renumber_lines()
        }

        function renumber_lines() {
            var n = document.getElementById('editor').value.split('\n').length
            var s = ''

            for (var i = 1; i <= n; i++) {
                if (i % 10 == 0) {
                    s += `<u>${i}</u><br>`
                }
                else {
                    s += `${i}<br>`
                }
            }

            document.getElementById('editor-nol').innerHTML = s
        }

        function save() {
            var code = document.getElementById('editor').value
            var name = document.getElementById('name').value
            name = '#WRRR_' + name.replace(/ /g, '_')

            localStorage.setItem(name, code)

            document.getElementById('save_button').hidden = true
        }

        function scrolled() {
            var y = document.getElementById('editor')
            var e = document.getElementById('editor-nol')
            e.style.height = y.scrollHeight
            e.style.marginTop = `-${y.scrollTop}px`
        }

    </script>

</head>

<body onload='changed()'>
    <div id='container-top'>
        <div id='editor-nol'></div>
        <textarea autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' id='editor' onkeyup='changed()' onscroll='scrolled()'></textarea>
        <script>

            code = `
;redcode
;name Validate 1.1R
;author Stefan Strack
;strategy System validation program - based on Mark Durham's validation suite
;
;   This program tests your corewar system for compliance with the ICWS88-
;   standard and compatibility with KotH. It self-ties (i.e. loops forever)
;   if the running system is ICWS88-compliant and uses in-register evaluation;
;   suicides (terminates) if the interpreter is not ICWS compliant and/or uses
;   in-memory evaluation. A counter at label 'flag' can be used to determine
;   where the exception occured.
;
;   Tests:
;   -all opcodes and addressing modes
;   -ICWS88-style ADD/SUB
;   -ICWS88-style SPL
;   -correct timing
;   -in-memory vs. in-register evaluation
;   -core initialization
;
;   Version 1.1: added autodestruct in case process gets stuck


;assert MAXLENGTH >= 90

start   spl l1,count+1
        jmz <start,0
count   djn count,#36      ;time cycles
        sub #1,@start
clear   mov t1,<last+2     ;autodestruct if stuck
        jmp clear
t1      dat #0,#1
t2      dat #0,#3
l1      spl l2
        dat <t2,<t2
l2      cmp t1,t2
        jmp fail
        spl l4
        jmz l3,<0
t3      dat #0,#1
t4      dat #0,#2
l3      jmp @0,<0
l4      jmp <t5,#0
        jmp l5
t5      dat #0,#0
t6      dat #0,#-1
l5      cmp t3,t4
        jmp fail
        cmp t5,t6
        jmp fail
        jmp <t7,<t7
        jmp l6
t7      dat #0,#0
t8      dat #0,#-2
l6      cmp t7,t8
        jmp fail
        mov t9,<t9         ;test in-memory evaluation
t9      jmn l7,1
t10     jmn l7+1,1
l7      cmp t9,t10
        jmp fail
        mov @0,<t11
t11     jmn l8,1
t12     jmn l8+1,1
l8      cmp t11,t12
        jmp fail
        spl l9
        mov <t13,t14
t13     dat <0,#1
t14     dat <0,#1
t15     dat <0,#-1
l9      mov <t16,t16
t16     jmz l10,1
        jmp fail
l10     cmp t13,t15
        jmp fail
        add t17,<t17
t17     jmp 1,1
t18     jmp 2,1
        cmp t17,t18
        jmp fail
        add @0,<t19
t19     jmp 1,1
        jmp fail
        cmp t18,t19
        jmp fail
        spl l11            ;ICWS86 SPL will fail here
        cmp t20,t21
        jmp l12
        jmp fail
l11     sub <t20,t20
t20     dat #2,#1
t21     dat #0,#0
l12     cmp t20,t21
        jmp fail
t22     sub <t23,<t23
t23     jmp l13,1
t24     sub <-2,<1
t25     jmp l13+2,-1
l13     cmp t22,t24
        jmp fail
        cmp t23,t25
        jmp fail
        cmp start-1,t26    ;Core initialization dat 0,0
        jmp l14
        jmp fail
t26     dat #0,#0
l14     slt #0,count       ;check cycle timer
        jmp success
fail    mov count,flag     ;save counter for post-mortem debugging
    mov t1,count       ;kill counter
    jmp clear          ;and auto-destruct
flag    dat #0
success mov flag,clear     ;cancel autodestruct
last    jmp 0              ;and loop forever

        end start
`

            document.getElementById('editor').value = code

        </script>

        <div class='v-spacer'></div>
        <pre id='preprocessor_output'>preprocessor output</pre>
        <div class='v-spacer'></div>
        <pre id='assembler_output'>assembler output</pre>
    </div>

    <pre id='log'>nCode IDE v0.1</pre>
    <div id='toolbar'>
        <input type='button' value='assemble' onclick='changed()'>
        <input type='button' value='write to local storage' onclick='save()' id='save_button'>
        <input type='text' placeholder='warrior name' id='name'>
    </div>
</body>

</html>