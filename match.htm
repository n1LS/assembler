<html>

<head>
    <link href='https://schickt.de/font/px8x8.css' rel='stylesheet'>
    <link rel="stylesheet" type="text/css" href="style/style.css" media="screen" />

    <style>
        #log {
            overflow: scroll;
            height: calc(100% - 16px);
        }
    </style>

    <script src='rc-zeus.js'></script>
    <script src='rc-core.js'></script>
    <script src='rc-math.js'></script>
    <script src='rc-address-modes.js'></script>
    <script src='rc-preprocessor.js'></script>
    <script src='rc-assembler.js'></script>
    <script src='rc-classes.js'></script>
    <script src='rc-instruction-set.js'></script>
    <script src='rc-instruction.js'></script>

    <script src='ui-common.js'></script>

    <script>

        var zeus
        var warriors
        var tournament_state = {}

        function init() {
            zeus = new Zeus(new Environment())

            // listen to messages from parent window
            window.addEventListener('message', message_handler, false)
        }

        function set_warriors(b64s) {
            warriors = []

            for (var i = 0; i < b64s.length; i++) {
                var code = atob(b64s[i])
                code += `\n;zeus_id ${i}`

                warriors.push({
                    code: code,
                    id: i,
                    score: 0
                })
            }
        }

        function message_handler(event) {
            items = event.data.split('::')
            action = items.shift(0)
            
            switch (action) {
                case 'load':
                    set_warriors(items)    
                    load_warriors(warriors)
                    break
                case 'environment':
                    zeus.environment = JSON.parse(atob(items[0]))
                    break
            }
        }

        function load_warriors(warriors) {
            zeus.reset()

            warriors.forEach(obj => {
                zeus.load_code(obj.code)
                obj.score = 0
            })

            zeus.validate_programs()
        }

        function log(text) {
            const l = document.getElementById('log')
            l.innerHTML += text + '<br>'

            // force redraw
            const d = l.style.display
            const q = l.offsetHeight
            l.offsetHeight += 1
            l.style.display = 'none'
            l.style.display = d
        }

        function clear_log() {
            document.getElementById('log').innerHTML = '';
        }

        function run_match() {
            clear_log()

            zeus.on_log = function (msg) {
                log(msg)
            }

            zeus.on_score = function (id, score, name) {
                warriors[id].score = score
                warriors[id].name = name
            }

            load_warriors(warriors)
            
            const start = performance.now()
            const cycles = zeus.run()
            const duration = ~~(performance.now() - start)
            const mips = ~~((cycles / 10) / duration) / 100

            log(`\nRan ${cycles} cycles in ${duration} ms, ${mips} MIPS.`)
        }    

        function run_tournament_match(w1, w2) {
            if (w1 != w2) {
                // run match

                zeus.reset()
                zeus.load_code(warriors[w1].code)
                zeus.load_code(warriors[w2].code)
                zeus.validate_programs()

                tournament_state.cycles += zeus.run()

                clear_log()

                const results = []

                for (var p = 0; p < warriors.length; p++) {
                    results.push({
                        name: warriors[p].name,
                        score: warriors[p].score
                    })
                }

                var max = 0

                results.sort(function (a, b) { 
                    max = Math.max(a.score, Math.max(b.score, max))
                    return b.score - a.score 
                })

                var max_l = (max + '').length
                var max_pos_l = (results.length + '').length

                for (var r = 0; r < results.length; r++) {
                    const result = results[r]
                    const name = result.name !== undefined ? result.name : '-'
                    const position = (1 + r + '').padStart(max_pos_l)
                    log(`${1 + position}.Â ${(result.score + '').padStart(max_l)} | ${name}`)
                }

                const num_w = warriors.length
                const total = num_w ** 2 - num_w
                const ran = w1 * num_w + w2 - w1 + 1

                const duration = ~~(performance.now() - tournament_state.start)
                const mips = ~~((tournament_state.cycles / 10) / duration) / 100

                results.sort(function (a, b) { return b.score - a.score })

                log(`\nMatch ${ran}/${total}\n${tournament_state.cycles} cycles in ${duration} ms\n${mips} MIPS.`)
            }

            // keep going

            var next_w1 = w1
            var next_w2 = w2 + 1
            
            if (next_w2 == warriors.length) {
                next_w2 = 0
                next_w1++

                if (next_w1 == warriors.length) {
                    // done
                    return
                }
            } 

            setTimeout( function () {
                run_tournament_match(next_w1, next_w2)
            }, 0)

        }

        function run_tournament() {
            clear_log()

            zeus.on_log = undefined

            zeus.on_score = function (id, score, name) {
                warriors[id].score += score
                warriors[id].name = name
            }

            // run each pair against each other
            
            tournament_state.start = performance.now()
            tournament_state.cycles = 0

            run_tournament_match(0, 0)
        }

    </script>
</head>

<body onload='init()'>

    <div class='top light'>

        <div>
            <pre id='log' class='padded code'><b>nCODE IDE :: MATCH CONSOLE</b><br></pre>
        </div>

    </div>

    <div class='toolbar'>
            <input type='button' value='RUN MATCH' onclick='run_match()'>
            <input type='button' value='RUN TOURNAMENT' onclick='run_tournament()'>
        <input type='button' value='CLEAR LOG' onclick='clear_log()' class='right'>
    </div>

</body>

</html>