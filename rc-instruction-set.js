class Opcode {

    constructor(id, num_params, name, short_name, a_modes, b_modes) {
        this.opcode = id
        this.num_params = num_params
        this.name = name
        this.short_name = short_name
        this.a_modes = a_modes
        this.b_modes = b_modes
    }

}

// autogenerated list of indices for the opcodes. these can be assigned to any-
// thing and in any order
var cmd = 0
const DAT = cmd++
const MOV = cmd++
const ADD = cmd++
const SUB = cmd++
const JMP = cmd++
const JMZ = cmd++
const JMN = cmd++
const CMP = cmd++
const SLT = cmd++
const DJN = cmd++
const SPL = cmd++
const NOP = cmd++

var opcodes = [
    //         ┌┬┬─────────────────────────────────────> opcode constant (value indifferent)
    //         │││  ┌──────────────────────────────────> number of parameters required
    //         │││  │   ┌┬┬────────────────────────────> long version opcode
    //         │││  │   │││    ┌───────────────────────> short version opcode
    //         │││  │   │││    │     ┌┬┬┬──────────────> address modes for A operand ($#@<)
    //         │││  │   │││    │     ││││    ┌┬┬┬──────> address modes for B operand ($#@<)
    new Opcode(DAT, 2, 'DAT', 'D', 0b0101, 0b0101),
    new Opcode(MOV, 2, 'MOV', 'M', 0b1111, 0b1011),
    new Opcode(ADD, 2, 'ADD', 'A', 0b1111, 0b1011),
    new Opcode(SUB, 2, 'SUB', 'S', 0b1111, 0b1011),
    new Opcode(JMP, 1, 'JMP', 'J', 0b1111, 0b1011),
    new Opcode(JMZ, 2, 'JMZ', 'Z', 0b1111, 0b1011),
    new Opcode(JMN, 2, 'JMN', 'N', 0b1111, 0b1011),
    new Opcode(CMP, 2, 'CMP', 'C', 0b1111, 0b1011),
    new Opcode(SLT, 2, 'SLT', 'S', 0b1111, 0b1011),
    new Opcode(DJN, 1, 'DJN', 'D', 0b1111, 0b1011),
    new Opcode(SPL, 1, 'SPL', 'F', 0b1111, 0b1011),
    new Opcode(NOP, 0, 'NOP', 'O', 0b1111, 0b1011),
]

function op_from_code(code) {
    for (var o = 0; o < opcodes.length; o++) {
        if (opcodes[o].opcode == code) {
            return opcodes[o]
        }
    }

    return null;
}