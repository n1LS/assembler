<html>

<head>
        <meta charset="utf-8"/>
        <link href="https://fonts.googleapis.com/css?family=Overpass+Mono" rel="stylesheet">
        <link href="https://www.schickt.de/fonts/icon.css" rel="stylesheet">
        <style>
        * {
            color: #f0f0f0;
            border: 0;
            font-weight: lighter;
            font-family: 'Overpass Mono', monospace;
            font-size: 11px;
            line-height: 90%;
        }

        input {
            background: #202020;
            padding: 8px;
            height: 32px;
        }

        #instruction {
            background: 101010;
            color: greenyellow;
        }

        #memory {
            background: #202020;
        }

        .A {
            color: #f06020;
        }

        .B {
            color: #2080f0;
        }

        .O {
            color: #808080;
        }

        body {
            display: flex;
            margin: 0;
            padding: 0;
        }

        #right {
            white-space: pre-wrap;
            white-space: -moz-pre-wrap;
            white-space: -pre-wrap;
            white-space: -o-pre-wrap;
            word-wrap: break-word;
            display: inline-block;
        }

        #left {
            width: 28ch;
            float: left;
            background: #101010;
        }

        #memory-raw {
            color: white;
        }

        #right {
            width: calc(100% - 28ch);
            float: left;
            background: #202020;
        }

        #toolbar {
            position: absolute;
            bottom: 0;
            height: 32px;
            width: 100%;
            background: #404040;
        }

        #display {
            width: 100%;
            height: 100%;
        }
    </style>

    <script src="rc-constants.js"></script>
    <script src="rc-math.js"></script>
    <script src="rc-address-modes.js"></script>
    <script src="rc-preprocessor.js"></script>
    <script src="rc-assembler.js"></script>
    <script src="rc-classes.js"></script>
    <script src="rc-core.js"></script>
    <script src="rc-instruction.js"></script>
    <script src="rc-instruction-set.js"></script>
    <script src="rc.js"></script>
    
    <script>
        
        var timer
        
        function run() {
            stop()
            timer = setInterval(run_cycle, 20)
        }
        
        function stop() {
            clearInterval(timer)
        }
        
        function run_cycle() {
            core.step()
            dump_state()
        }

        function dump_state() {
            var last = Math.min(kCORE_MEMORY_SIZE, 40)
            var dump = core.memory_dump(0, last).join("<br>")
            document.getElementById("memory").innerHTML = dump
            document.getElementById("instruction").innerHTML = "NEXT   " + core.next_instruction().to_string()

            var processes = core.processes
            var proc = processes.length + " process(es)<br><br>"

            for (var p = 0; p < processes.length; p++) {
                proc += `Process ${p}:<br>` + processes[p].instruction_pointers.join("<br>") + "<br>"
            }

            document.getElementById("processes").innerHTML = proc;

            var mem = core.memory
            const colors = {
                '-1': "O",
                '0': "A",
                '1': "B"
            }

            var last_process = core.memory[0].process_id
            var dmp = "<span class='" + colors[last_process] + "'>"

            for (var a = 0; a < kCORE_MEMORY_SIZE; a++) {
                var i = core.memory[a]
                var op = Opcode.op_from_code(i.opcode).short_name

                if (i.process_id != last_process) {
                    last_process = i.process_id
                    var c = colors[i.process_id]
                    dmp += "</span><span class='" + c + "'>"
                }

                dmp += op
            }

            dmp += "</span>"

            document.getElementById("memory-raw").innerHTML = dmp;

            draw()
        }

        function draw() {
            const canvas = document.getElementById("display")
            canvas.width = canvas.clientWidth;
            canvas.height = canvas.clientHeight;

            const ctx = canvas.getContext("2d")
            const size = Math.floor(Math.sqrt((canvas.clientHeight * canvas.clientWidth) / kCORE_MEMORY_SIZE) - 1);
            const cols = Math.floor(canvas.clientWidth / size)

            ctx.clearRect(0, 0, canvas.width, canvas.width)

            function location(index) {
                return { x: index % cols, y: Math.floor(index / cols) }
            }

            ctx.font = `${size * 0.85}px Icon`;

            for (var i = 0; i < kCORE_MEMORY_SIZE; i++)  {
                var l = location(i)
                const x = l.x * (1 + size)
                const y = l.y * (1 + size)

                const instruction = core.memory[i]

                ctx.fillStyle = ["#333333","#f06020", "#2080f0"][instruction.process_id + 1]
                ctx.fillRect(x, y, size, size)
                var op = Opcode.op_from_code(instruction.opcode).name
                
                const characters = {
                    'DAT': '\uf0aa',
                    'MOV': '\uf024',
                    'ADD': '\uf021',
                    'NOP': '\uf020',
                    'JMP': '\uf159',
                    'FRK': '\uf0b6',
                    'SUB': '\uf022',
                    'JMZ': '\uf000',
                    'JMN': '\uf000',
                    'CMP': '\uf000',
                    'SLT': '\uf000',
                    'DJN': '\uf000',
                }

                ctx.fillStyle = ["#606060","#ffc080", "#80e0ff"][instruction.process_id + 1]
                ctx.fillText(characters[op], x + 1, y + size - 2);
            }
           
        }

        function init_everything() {
            var code1 =
                "; imp\n" +
                "imp mov 0 next\n" +
                "next dat 0 0";

            var code2 =
                "; dwarf\n" +
                " add #4, 3\n" +
                " mov 2, @2\n" +
                " jmp -2\n" +
                "dummy dat #42 #0";

            var code3 = 
                "; stone \n" +
                " mov <2, 3\n" + 
                " mov 3, -1\n" + 
                " jmp -2\n" + 
                " dat #0 #0\n" + 
                " dat #-5084, #5084";

            // init both prpgrams
            
            var p1 = new Program(code1)
            core.load_program(p1, 0, 2000)

            var p2 = new Program(code3)
            core.load_program(p2, 1, 0)

            dump_state()
            draw()
        }

    </script>

</head>

<body onload="init_everything()" onresize="draw()">
    <div id="left">
        <pre id="instruction">no instruction</pre>
        <pre id="memory">no memory dump</pre>
        <pre id="processes">no process info</pre>
    </div>
    <div id="right">
        <div style="display:none" id="memory-raw">no memory dump</div>
        <canvas id="display" width="512" height="512"></canvas>
    </div>
    <div id="toolbar">
        <input type=button value="step" onclick="run_cycle()">
        <input type=button value="dump" onclick="dump_state()">
        <input type=button value="run" onclick="run()">
        <input type=button value="stop" onclick="stop()">
    </div>

</body>

</html>