<html>

<head>
        <meta charset="utf-8"/>
        <link href="https://fonts.googleapis.com/css?family=Overpass+Mono" rel="stylesheet">
        <link href="https://www.schickt.de/fonts/icon.css" rel="stylesheet">
        <style>
        * {
            color: #f0f0f0;
            border: 0;
            font-weight: lighter;
            font-family: 'Overpass Mono', monospace;
            font-size: 11px;
            line-height: 90%;
        }

        input {
            background: #202020;
            padding: 8px;
            height: 32px;
        }

        #instruction {
            background: 101010;
            color: greenyellow;
        }

        #memory0,
        #memory1 {
            background: #202020;
        }

        .A {
            color: #f06020;
        }

        .B {
            color: #2080f0;
        }

        .O {
            color: #808080;
        }

        body {
            display: flex;
            margin: 0;
            padding: 0;
        }

        #right {
            white-space: pre-wrap;
            white-space: -moz-pre-wrap;
            white-space: -pre-wrap;
            white-space: -o-pre-wrap;
            word-wrap: break-word;
            display: inline-block;
        }

        #left {
            width: 28ch;
            float: left;
            background: #101010;
        }

        #memory-raw {
            color: white;
        }

        #right {
            width: calc(100% - 28ch);
            float: left;
            background: #202020;
        }

        #toolbar {
            position: absolute;
            bottom: 0;
            height: 32px;
            width: 100%;
            background: #404040;
        }

        #display {
            width: 100%;
            height: 100%;
        }
    </style>

    <script src="rc-constants.js"></script>
    <script src="rc-math.js"></script>
    <script src="rc-address-modes.js"></script>
    <script src="rc-preprocessor.js"></script>
    <script src="rc-assembler.js"></script>
    <script src="rc-classes.js"></script>
    <script src="rc-core.js"></script>
    <script src="rc-instruction.js"></script>
    <script src="rc-instruction-set.js"></script>
    <script>

        var core

        var timer
        
        function run() {
            stop()
            timer = setInterval(run_cycle, 25)
        }
        
        function stop() {
            clearInterval(timer)
        }
        
        function run_cycle() {
            core.step()
            update()
        }
        
        function dump_state() {
            const pid = core.current_process_index
            const next = core.current_process().next()
            var dump = core.memory_dump(next - 5, next + 25).join("<br>")
            document.getElementById("memory" + pid).innerHTML = "PROCESS " + pid + "\n\n" + dump
        }

        var memory = new Array(kCORE_MEMORY_SIZE)

        function draw() {
            const canvas = document.getElementById("display")
            if (canvas.width != canvas.clientWidth || canvas.height != canvas.clientHeight) {
                canvas.width = canvas.clientWidth
                canvas.height = canvas.clientHeight
            }

            const spacing = 0

            const ctx = canvas.getContext("2d")
            const size = Math.floor(Math.sqrt((canvas.clientHeight * canvas.clientWidth) / kCORE_MEMORY_SIZE) - spacing)
            const cols = Math.floor(canvas.clientWidth / size)

            function hash(instruction) {
                return `${instruction.opcode}${instruction.read_flag}${instruction.write_flag}${instruction.execution_flag}${instruction.a.mode}${instruction.a.value}${instruction.b.mode}${instruction.b.value}`
            }

            function location(index) {
                return { x: index % cols, y: Math.floor(index / cols) }
            }

            ctx.font = `${size * 0.85}px Icon`;

            for (var i = 0; i < kCORE_MEMORY_SIZE; i++)  {
                const instruction = core.ram.memory[i]
                const i_hash = hash(instruction)

                if (i_hash == memory[i]) {
                    continue;
                }
                
                memory[i] = i_hash

                var l = location(i)
                const x = l.x * (spacing + size)
                const y = l.y * (spacing + size)


                ctx.fillStyle = ["#333333","#f06020", "#2080f0"][instruction.read_flag + 1]
                ctx.beginPath()
                ctx.moveTo(x, y)
                ctx.lineTo(x + size, y)
                ctx.lineTo(x, y + size)
                ctx.fill()
                
                ctx.fillStyle = ["#333333","#f06020", "#2080f0"][instruction.write_flag + 1]
                ctx.beginPath()
                ctx.moveTo(x + size, y)
                ctx.lineTo(x + size, y + size)
                ctx.lineTo(x, y + size)
                ctx.fill()

                var op = Opcode.from_code(instruction.opcode).name
                
                const characters = {
                    'DAT': '\uf0aa',
                    'MOV': '\uf024',
                    'ADD': '\uf021',
                    'NOP': '\uf020',
                    'JMP': '\uf159',
                    'FRK': '\uf0b6',
                    'SUB': '\uf022',
                    'JMZ': '\uf000',
                    'JMN': '\uf000',
                    'CMP': '\uf000',
                    'SLT': '\uf000',
                    'DJN': '\uf000',
                }

                ctx.fillStyle = ["#606060","#ffc080", "#80e0ff"][instruction.execution_flag + 1]
                ctx.fillText(characters[op], x + 1, y + size - 2);
            }
           
        }

        function init_everything() {
            core = new Core()
            
            var code1 =
                "; imp\n" +
                "imp mov 0 next\n" +
                "next dat 0 0";

            var code2 =
                "; dwarf\n" +
                " add #4, 3\n" +
                " mov 2, @2\n" +
                " jmp -2\n" +
                "dummy dat #42 #0";

            var code3 = 
                "; stone \n" +
                " mov <2, 3\n" + 
                " add 3, -1\n" + 
                " jmp -2\n" + 
                " dat #0 #0\n" + 
                " dat #-5084, #5084";

            // init both prpgrams
            
            var p1 = new Program(code1)
            core.load_program(p1, 0, 2000)

            var p2 = new Program(code3)
            core.load_program(p2, 1, 0)

            update()
        }

        function update() {
            dump_state()

            document.getElementById("instruction").innerHTML = "NEXT   " + core.next_instruction().to_string()

            var processes = core.processes
            var proc = processes.length + " process(es)<br><br>"

            for (var p = 0; p < processes.length; p++) {
                proc += `Process ${p}:<br>` + processes[p].instruction_pointers.join("<br>") + "<br>"
            }

            document.getElementById("processes").innerHTML = proc;

            draw()
        }

    </script>

</head>

<body onload="init_everything()" onresize="draw()">
    <div id="left">
        <pre id="instruction">no instruction</pre>
        <pre id="memory0">no memory dump</pre>
        <pre id="memory1">no memory dump</pre>
        <pre id="processes">no process info</pre>
    </div>
    <div id="right">
        <div style="display:none" id="memory-raw">no memory dump</div>
        <canvas id="display" width="512" height="512"></canvas>
    </div>
    <div id="toolbar">
        <input type=button value="step" onclick="run_cycle()">
        <input type=button value="dump" onclick="dump_state()">
        <input type=button value="run" onclick="run()">
        <input type=button value="stop" onclick="stop()">
    </div>

</body>

</html>